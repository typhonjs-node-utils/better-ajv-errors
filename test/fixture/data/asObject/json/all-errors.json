{
   "/duplicate": [
      {
         "codeFrame": "  1 | {\n> 2 |   \"duplicate\": false,\n    |                ^^^^^\n  3 |   \"enum-one\": false,\n  4 |   \"enum-three\": false,\n  5 |   \"enum-two\": false,",
         "dataPath": "/duplicate",
         "error": {
            "keyword": "type",
            "dataPath": "/duplicate",
            "params": {
               "type": "object"
            },
            "message": "should be object",
            "schemaPath": "#/definitions/object1/type"
         },
         "keyword": "type",
         "message": "/duplicate should be object"
      }
   ],
   "/enum-one": [
      {
         "codeFrame": "  1 | {\n  2 |   \"duplicate\": false,\n> 3 |   \"enum-one\": false,\n    |               ^^^^^\n  4 |   \"enum-three\": false,\n  5 |   \"enum-two\": false,\n  6 |   \"errorMessage\": false,",
         "dataPath": "/enum-one",
         "error": {
            "keyword": "enum",
            "dataPath": "/enum-one",
            "params": {
               "allowedValues": [
                  "ONE"
               ]
            },
            "message": "should be equal to one of the allowed values",
            "schemaPath": "#/properties/enum-one/enum"
         },
         "keyword": "enum",
         "message": "/enum-one should be equal to one of the allowed values: 'ONE'"
      }
   ],
   "/enum-two": [
      {
         "codeFrame": "  3 |   \"enum-one\": false,\n  4 |   \"enum-three\": false,\n> 5 |   \"enum-two\": false,\n    |               ^^^^^\n  6 |   \"errorMessage\": false,\n  7 |   \"not-type-string\": \"well it's a string\",\n  8 |   \"type-array-additionalItems-false\": [",
         "dataPath": "/enum-two",
         "error": {
            "keyword": "enum",
            "dataPath": "/enum-two",
            "params": {
               "allowedValues": [
                  "ONE",
                  "TWO"
               ]
            },
            "message": "should be equal to one of the allowed values",
            "schemaPath": "#/properties/enum-two/enum"
         },
         "keyword": "enum",
         "message": "/enum-two should be equal to one of the allowed values: 'ONE' or 'TWO'"
      }
   ],
   "/enum-three": [
      {
         "codeFrame": "  2 |   \"duplicate\": false,\n  3 |   \"enum-one\": false,\n> 4 |   \"enum-three\": false,\n    |                 ^^^^^\n  5 |   \"enum-two\": false,\n  6 |   \"errorMessage\": false,\n  7 |   \"not-type-string\": \"well it's a string\",",
         "dataPath": "/enum-three",
         "error": {
            "keyword": "enum",
            "dataPath": "/enum-three",
            "params": {
               "allowedValues": [
                  "ONE",
                  "TWO",
                  "THREE"
               ]
            },
            "message": "should be equal to one of the allowed values",
            "schemaPath": "#/properties/enum-three/enum"
         },
         "keyword": "enum",
         "message": "/enum-three should be equal to one of the allowed values: 'ONE', 'TWO', or 'THREE'"
      }
   ],
   "/errorMessage": [
      {
         "codeFrame": "  4 |   \"enum-three\": false,\n  5 |   \"enum-two\": false,\n> 6 |   \"errorMessage\": false,\n    |                   ^^^^^\n  7 |   \"not-type-string\": \"well it's a string\",\n  8 |   \"type-array-additionalItems-false\": [\n  9 |     \"is fine\",",
         "dataPath": "/errorMessage",
         "error": {
            "keyword": "errorMessage",
            "dataPath": "/errorMessage",
            "params": {
               "errors": [
                  {
                     "keyword": "type",
                     "dataPath": "/errorMessage",
                     "schemaPath": "#/properties/errorMessage/type",
                     "params": {
                        "type": "string"
                     },
                     "message": "should be string",
                     "emUsed": true
                  }
               ]
            },
            "message": "should be a string",
            "schemaPath": "#/properties/errorMessage/errorMessage"
         },
         "keyword": "errorMessage",
         "message": "/errorMessage should be a string"
      }
   ],
   "/type-array-additionalItems-false": [
      {
         "codeFrame": "   6 |   \"errorMessage\": false,\n   7 |   \"not-type-string\": \"well it's a string\",\n>  8 |   \"type-array-additionalItems-false\": [\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   9 |     \"is fine\",\n  10 |     true,\n  11 |     \"not fine\"",
         "dataPath": "/type-array-additionalItems-false",
         "error": {
            "keyword": "additionalItems",
            "dataPath": "/type-array-additionalItems-false",
            "params": {
               "limit": 2
            },
            "message": "should NOT have more than 2 items",
            "schemaPath": "#/properties/type-array-additionalItems-false/additionalItems"
         },
         "keyword": "additionalItems",
         "message": "/type-array-additionalItems-false should NOT have more than 2 items"
      }
   ],
   "/type-array-additionalItems-type-boolean/2": [
      {
         "codeFrame": "  14 |     \"is fine\",\n  15 |     true,\n> 16 |     \"not fine\"\n     |     ^^^^^^^^^^\n  17 |   ],\n  18 |   \"type-array-contains\": [\n  19 |     \"not boolean\",",
         "dataPath": "/type-array-additionalItems-type-boolean/2",
         "error": {
            "keyword": "type",
            "dataPath": "/type-array-additionalItems-type-boolean/2",
            "params": {
               "type": "boolean"
            },
            "message": "should be boolean",
            "schemaPath": "#/properties/type-array-additionalItems-type-boolean/additionalItems/type"
         },
         "keyword": "type",
         "message": "/type-array-additionalItems-type-boolean/2 should be boolean"
      }
   ],
   "/type-array-contains/0": [
      {
         "codeFrame": "  17 |   ],\n  18 |   \"type-array-contains\": [\n> 19 |     \"not boolean\",\n     |     ^^^^^^^^^^^^^\n  20 |     \"not boolean\",\n  21 |     \"not boolean\",\n  22 |     \"not boolean\"",
         "dataPath": "/type-array-contains/0",
         "error": {
            "keyword": "type",
            "dataPath": "/type-array-contains/0",
            "params": {
               "type": "boolean"
            },
            "message": "should be boolean",
            "schemaPath": "#/properties/type-array-contains/contains/type"
         },
         "keyword": "type",
         "message": "/type-array-contains/0 should be boolean"
      }
   ],
   "/type-array-contains/1": [
      {
         "codeFrame": "  18 |   \"type-array-contains\": [\n  19 |     \"not boolean\",\n> 20 |     \"not boolean\",\n     |     ^^^^^^^^^^^^^\n  21 |     \"not boolean\",\n  22 |     \"not boolean\"\n  23 |   ],",
         "dataPath": "/type-array-contains/1",
         "error": {
            "keyword": "type",
            "dataPath": "/type-array-contains/1",
            "params": {
               "type": "boolean"
            },
            "message": "should be boolean",
            "schemaPath": "#/properties/type-array-contains/contains/type"
         },
         "keyword": "type",
         "message": "/type-array-contains/1 should be boolean"
      }
   ],
   "/type-array-contains/2": [
      {
         "codeFrame": "  19 |     \"not boolean\",\n  20 |     \"not boolean\",\n> 21 |     \"not boolean\",\n     |     ^^^^^^^^^^^^^\n  22 |     \"not boolean\"\n  23 |   ],\n  24 |   \"type-array-maxItems\": [",
         "dataPath": "/type-array-contains/2",
         "error": {
            "keyword": "type",
            "dataPath": "/type-array-contains/2",
            "params": {
               "type": "boolean"
            },
            "message": "should be boolean",
            "schemaPath": "#/properties/type-array-contains/contains/type"
         },
         "keyword": "type",
         "message": "/type-array-contains/2 should be boolean"
      }
   ],
   "/type-array-contains/3": [
      {
         "codeFrame": "  20 |     \"not boolean\",\n  21 |     \"not boolean\",\n> 22 |     \"not boolean\"\n     |     ^^^^^^^^^^^^^\n  23 |   ],\n  24 |   \"type-array-maxItems\": [\n  25 |     \"onlyOneA\",",
         "dataPath": "/type-array-contains/3",
         "error": {
            "keyword": "type",
            "dataPath": "/type-array-contains/3",
            "params": {
               "type": "boolean"
            },
            "message": "should be boolean",
            "schemaPath": "#/properties/type-array-contains/contains/type"
         },
         "keyword": "type",
         "message": "/type-array-contains/3 should be boolean"
      }
   ],
   "/type-array-contains": [
      {
         "codeFrame": "  16 |     \"not fine\"\n  17 |   ],\n> 18 |   \"type-array-contains\": [\n     |   ^^^^^^^^^^^^^^^^^^^^^\n  19 |     \"not boolean\",\n  20 |     \"not boolean\",\n  21 |     \"not boolean\",",
         "dataPath": "/type-array-contains",
         "error": {
            "keyword": "contains",
            "dataPath": "/type-array-contains",
            "params": {
               "minContains": 1
            },
            "message": "should contain at least 1 valid item(s)",
            "schemaPath": "#/properties/type-array-contains/contains"
         },
         "keyword": "contains",
         "message": "/type-array-contains should contain at least 1 valid item(s)"
      }
   ],
   "/type-array-maxItems": [
      {
         "codeFrame": "  22 |     \"not boolean\"\n  23 |   ],\n> 24 |   \"type-array-maxItems\": [\n     |   ^^^^^^^^^^^^^^^^^^^^^\n  25 |     \"onlyOneA\",\n  26 |     \"onlyOneB\"\n  27 |   ],",
         "dataPath": "/type-array-maxItems",
         "error": {
            "keyword": "maxItems",
            "dataPath": "/type-array-maxItems",
            "params": {
               "limit": 1
            },
            "message": "should NOT have more than 1 items",
            "schemaPath": "#/properties/type-array-maxItems/maxItems"
         },
         "keyword": "maxItems",
         "message": "/type-array-maxItems should NOT have more than 1 items"
      }
   ],
   "/type-array-minItems": [
      {
         "codeFrame": "  26 |     \"onlyOneB\"\n  27 |   ],\n> 28 |   \"type-array-minItems\": [\n     |   ^^^^^^^^^^^^^^^^^^^^^\n  29 |     \"needTwo\"\n  30 |   ],\n  31 |   \"type-array-tuple-type\": [",
         "dataPath": "/type-array-minItems",
         "error": {
            "keyword": "minItems",
            "dataPath": "/type-array-minItems",
            "params": {
               "limit": 2
            },
            "message": "should NOT have fewer than 2 items",
            "schemaPath": "#/properties/type-array-minItems/minItems"
         },
         "keyword": "minItems",
         "message": "/type-array-minItems should NOT have fewer than 2 items"
      }
   ],
   "/type-array-tuple-type/0": [
      {
         "codeFrame": "  30 |   ],\n  31 |   \"type-array-tuple-type\": [\n> 32 |     false,\n     |     ^^^^^\n  33 |     false\n  34 |   ],\n  35 |   \"type-array-uniqueItems\": [",
         "dataPath": "/type-array-tuple-type/0",
         "error": {
            "keyword": "type",
            "dataPath": "/type-array-tuple-type/0",
            "params": {
               "type": "string"
            },
            "message": "should be string",
            "schemaPath": "#/properties/type-array-tuple-type/items/0/type"
         },
         "keyword": "type",
         "message": "/type-array-tuple-type/0 should be string"
      }
   ],
   "/type-array-uniqueItems": [
      {
         "codeFrame": "  33 |     false\n  34 |   ],\n> 35 |   \"type-array-uniqueItems\": [\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^\n  36 |     \"sameItem\",\n  37 |     \"sameItem\"\n  38 |   ],",
         "dataPath": "/type-array-uniqueItems",
         "error": {
            "keyword": "uniqueItems",
            "dataPath": "/type-array-uniqueItems",
            "params": {
               "i": 0,
               "j": 1
            },
            "message": "should NOT have duplicate items (items ## 1 and 0 are identical)",
            "schemaPath": "#/properties/type-array-uniqueItems/uniqueItems"
         },
         "keyword": "uniqueItems",
         "message": "/type-array-uniqueItems should NOT have duplicate items (items ## 1 and 0 are identical)"
      }
   ],
   "/type-number-minimum": [
      {
         "codeFrame": "  37 |     \"sameItem\"\n  38 |   ],\n> 39 |   \"type-number-minimum\": 0,\n     |                          ^\n  40 |   \"type-number-multipleOf\": 5,\n  41 |   \"type-object-additionalProperties-false\": {\n  42 |     \"one\": \"valid\",",
         "dataPath": "/type-number-minimum",
         "error": {
            "keyword": "minimum",
            "dataPath": "/type-number-minimum",
            "params": {
               "comparison": ">=",
               "limit": 1
            },
            "message": "should be >= 1",
            "schemaPath": "#/properties/type-number-minimum/minimum"
         },
         "keyword": "minimum",
         "message": "/type-number-minimum should be >= 1"
      }
   ],
   "/type-number-multipleOf": [
      {
         "codeFrame": "  38 |   ],\n  39 |   \"type-number-minimum\": 0,\n> 40 |   \"type-number-multipleOf\": 5,\n     |                             ^\n  41 |   \"type-object-additionalProperties-false\": {\n  42 |     \"one\": \"valid\",\n  43 |     \"two\": false,",
         "dataPath": "/type-number-multipleOf",
         "error": {
            "keyword": "multipleOf",
            "dataPath": "/type-number-multipleOf",
            "params": {
               "multipleOf": 10
            },
            "message": "should be multiple of 10",
            "schemaPath": "#/properties/type-number-multipleOf/multipleOf"
         },
         "keyword": "multipleOf",
         "message": "/type-number-multipleOf should be multiple of 10"
      }
   ],
   "/type-object-additionalProperties-false": [
      {
         "codeFrame": "  41 |   \"type-object-additionalProperties-false\": {\n  42 |     \"one\": \"valid\",\n> 43 |     \"two\": false,\n     |     ^^^^^\n  44 |     \"three\": false\n  45 |   },\n  46 |   \"type-object-additionalProperties-type-boolean\": {",
         "dataPath": "/type-object-additionalProperties-false",
         "error": {
            "keyword": "additionalProperties",
            "dataPath": "/type-object-additionalProperties-false",
            "params": {
               "additionalProperty": "two"
            },
            "message": "should NOT have additional properties",
            "schemaPath": "#/properties/type-object-additionalProperties-false/additionalProperties"
         },
         "keyword": "additionalProperties",
         "message": "/type-object-additionalProperties-false should NOT have additional properties: 'two'"
      },
      {
         "codeFrame": "  42 |     \"one\": \"valid\",\n  43 |     \"two\": false,\n> 44 |     \"three\": false\n     |     ^^^^^^^\n  45 |   },\n  46 |   \"type-object-additionalProperties-type-boolean\": {\n  47 |     \"one\": \"valid\",",
         "dataPath": "/type-object-additionalProperties-false",
         "error": {
            "keyword": "additionalProperties",
            "dataPath": "/type-object-additionalProperties-false",
            "params": {
               "additionalProperty": "three"
            },
            "message": "should NOT have additional properties",
            "schemaPath": "#/properties/type-object-additionalProperties-false/additionalProperties"
         },
         "keyword": "additionalProperties",
         "message": "/type-object-additionalProperties-false should NOT have additional properties: 'three'"
      }
   ],
   "/type-object-additionalProperties-type-boolean/three": [
      {
         "codeFrame": "  47 |     \"one\": \"valid\",\n  48 |     \"two\": false,\n> 49 |     \"three\": \"not boolean\"\n     |              ^^^^^^^^^^^^^\n  50 |   },\n  51 |   \"type-object-dependencies-properties\": {\n  52 |     \"one\": \"depends on two\"",
         "dataPath": "/type-object-additionalProperties-type-boolean/three",
         "error": {
            "keyword": "type",
            "dataPath": "/type-object-additionalProperties-type-boolean/three",
            "params": {
               "type": "boolean"
            },
            "message": "should be boolean",
            "schemaPath": "#/properties/type-object-additionalProperties-type-boolean/additionalProperties/type"
         },
         "keyword": "type",
         "message": "/type-object-additionalProperties-type-boolean/three should be boolean"
      }
   ],
   "/type-object-dependencies-properties": [
      {
         "codeFrame": "  49 |     \"three\": \"not boolean\"\n  50 |   },\n> 51 |   \"type-object-dependencies-properties\": {\n     |                                          ^\n> 52 |     \"one\": \"depends on two\"\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n> 53 |   },\n     | ^^^^\n  54 |   \"type-object-dependencies-schema\": {\n  55 |     \"one\": \"depends on two\",\n  56 |     \"two\": false",
         "dataPath": "/type-object-dependencies-properties",
         "error": {
            "keyword": "dependencies",
            "dataPath": "/type-object-dependencies-properties",
            "params": {
               "property": "one",
               "missingProperty": "two",
               "depsCount": 1,
               "deps": "two"
            },
            "message": "should have property two when property one is present",
            "schemaPath": "#/properties/type-object-dependencies-properties/dependencies"
         },
         "keyword": "dependencies",
         "message": "/type-object-dependencies-properties should have property two when property one is present"
      }
   ],
   "/type-object-dependencies-schema/two": [
      {
         "codeFrame": "  54 |   \"type-object-dependencies-schema\": {\n  55 |     \"one\": \"depends on two\",\n> 56 |     \"two\": false\n     |            ^^^^^\n  57 |   },\n  58 |   \"type-object-maxProperties\": {\n  59 |     \"one\": false,",
         "dataPath": "/type-object-dependencies-schema/two",
         "error": {
            "keyword": "type",
            "dataPath": "/type-object-dependencies-schema/two",
            "params": {
               "type": "string"
            },
            "message": "should be string",
            "schemaPath": "#/properties/type-object-dependencies-schema/dependencies/one/properties/two/type"
         },
         "keyword": "type",
         "message": "/type-object-dependencies-schema/two should be string"
      }
   ],
   "/type-object-maxProperties": [
      {
         "codeFrame": "  56 |     \"two\": false\n  57 |   },\n> 58 |   \"type-object-maxProperties\": {\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  59 |     \"one\": false,\n  60 |     \"too\": \"many\"\n  61 |   },",
         "dataPath": "/type-object-maxProperties",
         "error": {
            "keyword": "maxProperties",
            "dataPath": "/type-object-maxProperties",
            "params": {
               "limit": 1
            },
            "message": "should NOT have more than 1 items",
            "schemaPath": "#/properties/type-object-maxProperties/maxProperties"
         },
         "keyword": "maxProperties",
         "message": "/type-object-maxProperties should NOT have more than 1 items"
      }
   ],
   "/type-object-minProperties": [
      {
         "codeFrame": "  60 |     \"too\": \"many\"\n  61 |   },\n> 62 |   \"type-object-minProperties\": {\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  63 |     \"too\": \"few\"\n  64 |   },\n  65 |   \"type-object-patternProperties\": {",
         "dataPath": "/type-object-minProperties",
         "error": {
            "keyword": "minProperties",
            "dataPath": "/type-object-minProperties",
            "params": {
               "limit": 2
            },
            "message": "should NOT have fewer than 2 items",
            "schemaPath": "#/properties/type-object-minProperties/minProperties"
         },
         "keyword": "minProperties",
         "message": "/type-object-minProperties should NOT have fewer than 2 items"
      }
   ],
   "/type-object-patternProperties/S_2": [
      {
         "codeFrame": "  66 |     \"S_1\": \"ok\",\n  67 |     \"I_1\": 1,\n> 68 |     \"S_2\": false\n     |            ^^^^^\n  69 |   },\n  70 |   \"type-object-propertyNames-pattern\": {\n  71 |     \"not pattern [A-Z]\": false",
         "dataPath": "/type-object-patternProperties/S_2",
         "error": {
            "keyword": "type",
            "dataPath": "/type-object-patternProperties/S_2",
            "params": {
               "type": "string"
            },
            "message": "should be string",
            "schemaPath": "#/properties/type-object-patternProperties/patternProperties/%5ES_/type"
         },
         "keyword": "type",
         "message": "/type-object-patternProperties/S_2 should be string"
      }
   ],
   "/type-object-propertyNames-pattern": [
      {
         "codeFrame": "  68 |     \"S_2\": false\n  69 |   },\n> 70 |   \"type-object-propertyNames-pattern\": {\n     |                                        ^\n> 71 |     \"not pattern [A-Z]\": false\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n> 72 |   },\n     | ^^^^\n  73 |   \"type-object-required\": {\n  74 |     \"two\": false\n  75 |   },",
         "dataPath": "/type-object-propertyNames-pattern",
         "error": {
            "keyword": "pattern",
            "dataPath": "/type-object-propertyNames-pattern",
            "params": {
               "pattern": "^[A-Z]$"
            },
            "propertyName": "not pattern [A-Z]",
            "message": "should match pattern \"^[A-Z]$\"",
            "schemaPath": "#/properties/type-object-propertyNames-pattern/propertyNames/pattern"
         },
         "keyword": "pattern",
         "message": "/type-object-propertyNames-pattern should match pattern \"^[A-Z]$\""
      },
      {
         "codeFrame": "  68 |     \"S_2\": false\n  69 |   },\n> 70 |   \"type-object-propertyNames-pattern\": {\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  71 |     \"not pattern [A-Z]\": false\n  72 |   },\n  73 |   \"type-object-required\": {",
         "dataPath": "/type-object-propertyNames-pattern",
         "error": {
            "keyword": "propertyNames",
            "dataPath": "/type-object-propertyNames-pattern",
            "params": {
               "propertyName": "not pattern [A-Z]"
            },
            "message": "property name 'not pattern [A-Z]' is invalid",
            "schemaPath": "#/properties/type-object-propertyNames-pattern/propertyNames"
         },
         "keyword": "propertyNames",
         "message": "/type-object-propertyNames-pattern property name 'not pattern [A-Z]' is invalid"
      }
   ],
   "/type-object-required": [
      {
         "codeFrame": "  71 |     \"not pattern [A-Z]\": false\n  72 |   },\n> 73 |   \"type-object-required\": {\n     |   ^^^^^^^^^^^^^^^^^^^^^^\n  74 |     \"two\": false\n  75 |   },\n  76 |   \"type-string\": false,",
         "dataPath": "/type-object-required",
         "error": {
            "keyword": "required",
            "dataPath": "/type-object-required",
            "params": {
               "missingProperty": "one"
            },
            "message": "should have required property 'one'",
            "schemaPath": "#/properties/type-object-required/required"
         },
         "keyword": "required",
         "message": "/type-object-required should have required property 'one'"
      }
   ],
   "/type-string": [
      {
         "codeFrame": "  74 |     \"two\": false\n  75 |   },\n> 76 |   \"type-string\": false,\n     |                  ^^^^^\n  77 |   \"type-string-const\": \"not const\",\n  78 |   \"type-string-format-date\": \"not date\",\n  79 |   \"type-string-format-date-time\": \"not date time\",",
         "dataPath": "/type-string",
         "error": {
            "keyword": "type",
            "dataPath": "/type-string",
            "params": {
               "type": "string"
            },
            "message": "should be string",
            "schemaPath": "#/properties/type-string/type"
         },
         "keyword": "type",
         "message": "/type-string should be string"
      }
   ],
   "/not-type-string": [
      {
         "codeFrame": "   5 |   \"enum-two\": false,\n   6 |   \"errorMessage\": false,\n>  7 |   \"not-type-string\": \"well it's a string\",\n     |                      ^^^^^^^^^^^^^^^^^^^^\n   8 |   \"type-array-additionalItems-false\": [\n   9 |     \"is fine\",\n  10 |     true,",
         "dataPath": "/not-type-string",
         "error": {
            "keyword": "not",
            "dataPath": "/not-type-string",
            "params": {},
            "message": "should NOT be valid",
            "schemaPath": "#/properties/not-type-string/not"
         },
         "keyword": "not",
         "message": "/not-type-string should NOT be valid"
      }
   ],
   "/type-string-const": [
      {
         "codeFrame": "  75 |   },\n  76 |   \"type-string\": false,\n> 77 |   \"type-string-const\": \"not const\",\n     |                        ^^^^^^^^^^^\n  78 |   \"type-string-format-date\": \"not date\",\n  79 |   \"type-string-format-date-time\": \"not date time\",\n  80 |   \"type-string-format-time\": \"not time\",",
         "dataPath": "/type-string-const",
         "error": {
            "keyword": "const",
            "dataPath": "/type-string-const",
            "params": {
               "allowedValue": "const"
            },
            "message": "should be equal to constant",
            "schemaPath": "#/properties/type-string-const/const"
         },
         "keyword": "const",
         "message": "/type-string-const should be equal to constant: 'const'"
      }
   ],
   "/type-string-format-date": [
      {
         "codeFrame": "  76 |   \"type-string\": false,\n  77 |   \"type-string-const\": \"not const\",\n> 78 |   \"type-string-format-date\": \"not date\",\n     |                              ^^^^^^^^^^\n  79 |   \"type-string-format-date-time\": \"not date time\",\n  80 |   \"type-string-format-time\": \"not time\",\n  81 |   \"type-string-formatMinimum-date\": \"2020-01-01\",",
         "dataPath": "/type-string-format-date",
         "error": {
            "keyword": "format",
            "dataPath": "/type-string-format-date",
            "params": {
               "format": "date"
            },
            "message": "should match format \"date\"",
            "schemaPath": "#/properties/type-string-format-date/format"
         },
         "keyword": "format",
         "message": "/type-string-format-date should match format \"date\""
      }
   ],
   "/type-string-format-date-time": [
      {
         "codeFrame": "  77 |   \"type-string-const\": \"not const\",\n  78 |   \"type-string-format-date\": \"not date\",\n> 79 |   \"type-string-format-date-time\": \"not date time\",\n     |                                   ^^^^^^^^^^^^^^^\n  80 |   \"type-string-format-time\": \"not time\",\n  81 |   \"type-string-formatMinimum-date\": \"2020-01-01\",\n  82 |   \"type-string-maxLength\": \"max3\",",
         "dataPath": "/type-string-format-date-time",
         "error": {
            "keyword": "format",
            "dataPath": "/type-string-format-date-time",
            "params": {
               "format": "date-time"
            },
            "message": "should match format \"date-time\"",
            "schemaPath": "#/properties/type-string-format-date-time/format"
         },
         "keyword": "format",
         "message": "/type-string-format-date-time should match format \"date-time\""
      }
   ],
   "/type-string-format-time": [
      {
         "codeFrame": "  78 |   \"type-string-format-date\": \"not date\",\n  79 |   \"type-string-format-date-time\": \"not date time\",\n> 80 |   \"type-string-format-time\": \"not time\",\n     |                              ^^^^^^^^^^\n  81 |   \"type-string-formatMinimum-date\": \"2020-01-01\",\n  82 |   \"type-string-maxLength\": \"max3\",\n  83 |   \"type-string-minLength\": \"need6\",",
         "dataPath": "/type-string-format-time",
         "error": {
            "keyword": "format",
            "dataPath": "/type-string-format-time",
            "params": {
               "format": "time"
            },
            "message": "should match format \"time\"",
            "schemaPath": "#/properties/type-string-format-time/format"
         },
         "keyword": "format",
         "message": "/type-string-format-time should match format \"time\""
      }
   ],
   "/type-string-formatMinimum-date": [
      {
         "codeFrame": "  79 |   \"type-string-format-date-time\": \"not date time\",\n  80 |   \"type-string-format-time\": \"not time\",\n> 81 |   \"type-string-formatMinimum-date\": \"2020-01-01\",\n     |                                     ^^^^^^^^^^^^\n  82 |   \"type-string-maxLength\": \"max3\",\n  83 |   \"type-string-minLength\": \"need6\",\n  84 |   \"type-string-null\": false,",
         "dataPath": "/type-string-formatMinimum-date",
         "error": {
            "keyword": "formatMinimum",
            "dataPath": "/type-string-formatMinimum-date",
            "params": {
               "comparison": ">=",
               "limit": "2021-01-01"
            },
            "message": "should be >= 2021-01-01",
            "schemaPath": "#/properties/type-string-formatMinimum-date/formatMinimum"
         },
         "keyword": "formatMinimum",
         "message": "/type-string-formatMinimum-date should be >= 2021-01-01"
      }
   ],
   "/type-string-maxLength": [
      {
         "codeFrame": "  80 |   \"type-string-format-time\": \"not time\",\n  81 |   \"type-string-formatMinimum-date\": \"2020-01-01\",\n> 82 |   \"type-string-maxLength\": \"max3\",\n     |                            ^^^^^^\n  83 |   \"type-string-minLength\": \"need6\",\n  84 |   \"type-string-null\": false,\n  85 |   \"type-string-null-boolean\": 1,",
         "dataPath": "/type-string-maxLength",
         "error": {
            "keyword": "maxLength",
            "dataPath": "/type-string-maxLength",
            "params": {
               "limit": 3
            },
            "message": "should NOT have more than 3 characters",
            "schemaPath": "#/properties/type-string-maxLength/maxLength"
         },
         "keyword": "maxLength",
         "message": "/type-string-maxLength should NOT have more than 3 characters"
      }
   ],
   "/type-string-minLength": [
      {
         "codeFrame": "  81 |   \"type-string-formatMinimum-date\": \"2020-01-01\",\n  82 |   \"type-string-maxLength\": \"max3\",\n> 83 |   \"type-string-minLength\": \"need6\",\n     |                            ^^^^^^^\n  84 |   \"type-string-null\": false,\n  85 |   \"type-string-null-boolean\": 1,\n  86 |   \"type-string-pattern\": \"not phone number\"",
         "dataPath": "/type-string-minLength",
         "error": {
            "keyword": "minLength",
            "dataPath": "/type-string-minLength",
            "params": {
               "limit": 6
            },
            "message": "should NOT have fewer than 6 characters",
            "schemaPath": "#/properties/type-string-minLength/minLength"
         },
         "keyword": "minLength",
         "message": "/type-string-minLength should NOT have fewer than 6 characters"
      }
   ],
   "/type-string-null": [
      {
         "codeFrame": "  82 |   \"type-string-maxLength\": \"max3\",\n  83 |   \"type-string-minLength\": \"need6\",\n> 84 |   \"type-string-null\": false,\n     |                       ^^^^^\n  85 |   \"type-string-null-boolean\": 1,\n  86 |   \"type-string-pattern\": \"not phone number\"\n  87 | }",
         "dataPath": "/type-string-null",
         "error": {
            "keyword": "type",
            "dataPath": "/type-string-null",
            "params": {
               "type": [
                  "string",
                  "null"
               ]
            },
            "message": "should be string,null",
            "schemaPath": "#/properties/type-string-null/type"
         },
         "keyword": "type",
         "message": "/type-string-null should be string or null"
      }
   ],
   "/type-string-null-boolean": [
      {
         "codeFrame": "  83 |   \"type-string-minLength\": \"need6\",\n  84 |   \"type-string-null\": false,\n> 85 |   \"type-string-null-boolean\": 1,\n     |                               ^\n  86 |   \"type-string-pattern\": \"not phone number\"\n  87 | }\n  88 | ",
         "dataPath": "/type-string-null-boolean",
         "error": {
            "keyword": "type",
            "dataPath": "/type-string-null-boolean",
            "params": {
               "type": [
                  "string",
                  "null",
                  "boolean"
               ]
            },
            "message": "should be string,null,boolean",
            "schemaPath": "#/properties/type-string-null-boolean/type"
         },
         "keyword": "type",
         "message": "/type-string-null-boolean should be string, null, or boolean"
      }
   ],
   "/type-string-pattern": [
      {
         "codeFrame": "  84 |   \"type-string-null\": false,\n  85 |   \"type-string-null-boolean\": 1,\n> 86 |   \"type-string-pattern\": \"not phone number\"\n     |                          ^^^^^^^^^^^^^^^^^^\n  87 | }\n  88 | ",
         "dataPath": "/type-string-pattern",
         "error": {
            "keyword": "pattern",
            "dataPath": "/type-string-pattern",
            "params": {
               "pattern": "^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$"
            },
            "message": "should match pattern \"^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$\"",
            "schemaPath": "#/properties/type-string-pattern/pattern"
         },
         "keyword": "pattern",
         "message": "/type-string-pattern should match pattern \"^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$\""
      }
   ]
}